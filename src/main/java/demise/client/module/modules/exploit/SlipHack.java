package demise.client.module.modules.exploit;

import demise.client.module.Module;
import demise.client.module.setting.impl.DescriptionSetting;
import demise.client.utils.MathUtils;
import demise.client.utils.Utils;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent;

import java.util.Arrays;
import java.util.List;

import static demise.client.utils.Utils.Java.randomInt;

public class SlipHack extends Module {
    public static DescriptionSetting rat;

    public SlipHack() {
        super("SlipHack ⚠\uFE0F", ModuleCategory.exploit);
        withEnabled();

        this.registerSetting(rat = new DescriptionSetting("from weedhack"));
    }

    private final List<String> progress = Arrays.asList(
            "Bridging N2 to cosmic rays.",
            "Beaming at opponent's computer.",
            "Injecting Advanced Neural Network (ANN) AI player movement and mouse input.",
            "Injecting C++ extern alio code, injection modules and SlipHack™\uFE0F.",
            "Slipping up enemies.",
            "demise forge mixin technologies™\uFE0F.",
            "Enabling Ultimate Premium AutoClicker Bypass (YPCB).",
            "Injecting demise on system startup using demiseHook reborn v6 by Alan Wood industries.",
            "Enabling Augustus skyscraper disabler using the EpicGames live concert API.",
            "Activating AI machine learning thermodynamic neuralink backdoor.",
            "Targeting SlipHack to real life people using neuralink.",
            "Activating Hypixel interdimensional movement disabler.",
            "Abusing nano-particle atom biosphere velocity packet.",
            "Unpatching galaxy strafe."
    );

    private long lastMessageTime = 0;

    @Override
    public void onEnable() {
        lastMessageTime = System.currentTimeMillis();
    }

    @SubscribeEvent
    public void playerTickEvent(TickEvent.PlayerTickEvent event) {
        long currentTime = System.currentTimeMillis();
        if (currentTime - lastMessageTime > (MathUtils.randomFloat(25, 100) * 50)) {
            String message = progress.get(randomInt(0, progress.size()));
            Utils.Player.sendMessageToSelf("Current progress: " + message);

            lastMessageTime = currentTime;
        }
    }
}